<!doctype html>
<html>
  <head>
    <style>
      /* 전체 스타일 */
      body {
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #1a1a1a; /* 어두운 배경색 */
        color: #e0e0e0; /* 밝은 텍스트 색상 */
      }

      /* 중앙 정렬 */
      .container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh; /* 전체 높이 */
        padding: 20px;
      }

      /* 카드 스타일 */
      .card {
        background-color: #2a2a2a; /* 약간 더 밝은 회색 배경 */
        border-radius: 12px; /* 부드러운 모서리 */
        padding: 24px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); /* 그림자 효과 */
      }

      /* 헤더 스타일 */
      header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        border-bottom: 2px solid #e54d47; /* 레드 오렌지 색상 하이라이트 */
      }

      header h1 {
        font-size: 2.2rem; /* 폰트 크기 조정 */
        font-weight: bold;
        color: #e54d47; /* 레드 오렌지 색상 */
      }

      header span {
        font-size: 1rem;
        font-weight: 600;
        color: #e0e0e0; /* 밝은 텍스트 색상 */
        padding: 4px 12px; /* 글자 간 간격 조정 */
        border-radius: 4px;
        background-color: #e54d47; /* 레드 오렌지 배경색 */
      }

      /* 섹션 스타일 */
      .grid {
        display: flex;
        flex-direction: column; /* 수직 정렬 */
        gap: 24px; /* 카드 간 간격 조정 */
      }

      .p-6 {
        padding: 24px; /* 패딩 조정 */
      }

      .border {
        border: 1px solid #ccc;
      }

      .rounded-lg {
        border-radius: 12px; /* 부드러운 모서리 */
      }

      .shadow {
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
      }

      /* 카드 스타일 */
      .card {
        padding: 16px;
        border: 1px solid #ddd;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #2a2a2a; /* 어두운 회색 배경 */
        display: flex;
        flex-direction: column; /* 플렉스 레이아웃 */
        gap: 12px; /* 요소 간 간격 */
        max-width: 100%; /* 카드 너비 제한 */
      }

      /* 타이포그래피 */
      h2 {
        font-size: 1.8rem; /* 제목 폰트 크기 조정 */
        font-weight: bold;
        color: #e54d47; /* 레드 오렌지 색상 */
        margin-bottom: 16px;
      }

      span {
        font-size: 1rem;
        line-height: 1.5;
        color: #e0e0e0; /* 밝은 텍스트 색상 */
      }

      p {
        line-height: 1.6;
        font-size: 1rem;
        color: #e0e0e0; /* 밝은 텍스트 색상 */
      }

      /* 챌린지 참여자 목록 */
      /* 프로필 이미지에 대한 수정된 스타일 */
      .mission-teammate img {
        width: 100px; /* 프로필 이미지를 작게 조정 */
        height: 100px; /* 프로필 이미지를 작게 조정 */
        object-fit: cover; /* 이미지가 컨테이너에 맞게 잘려서 표시되도록 함 */
      }

      /* .mission-teammates 컨테이너 수정 */
      .mission-teammates {
        display: flex; /* 플렉스 컨테이너로 설정 */
        justify-content: space-between; /* 요소를 가로로 정렬 */
        gap: 12px; /* 요소 간 간격 설정 */
        flex-wrap: wrap; /* 요소들이 영역을 벗어나지 않도록 줄 바꿈되게 함 */
      }

      /* 챌린지 참여자 카드 */
      .mission-teammate span {
        text-align: center; /* 텍스트를 가운데 정렬 */
      }

      img {
        border-radius: 50%; /* 원형 이미지 */
        margin-bottom: 8px; /* 이미지 하단 마진 */
      }

      .mission-teammate span {
        margin-top: 4px;
        display: block;
      }

      /* 반응형 스타일 */
      @media (max-width: 768px) {
        /* 모바일에서의 세로 정렬 */
        .grid {
          flex-direction: column;
        }

        /* 모바일에서 카드의 너비 조정 */
        .card {
          max-width: 100%;
          margin-bottom: 24px;
        }
      }

      /* 버튼 스타일 */
      .back-btn,
      .submit-btn {
        background-color: #e54d47; /* 더 강렬한 레드 오렌지 색상 */
        color: white;
        border-radius: 12px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
      }

      .back-btn:hover,
      .submit-btn:hover {
        background-color: #ff6f61; /* 레드 오렌지 색상 */
      }

      /* 미리보기 이미지 */
      #previewImage {
        width: 200px; /* 고정된 너비 */
        height: 200px; /* 고정된 높이 */
        display: none; /* 디폴트로 미리보기 이미지를 숨깁니다 */
        object-fit: cover; /* 이미지 정렬 방식 */
      }
    </style>
  </head>
  <body>
    <div
      class="container flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100"
    >
      <div class="card w-100 max-w-4xl p-6 bg-white border rounded-md shadow">
        <header class="flex justify-content-between mb-12">
          <img src="../src/public/LifeBit(320*64).png" alt="Life Bit" />
        </header>
        <section class="grid gap-6">
          <!-- 챌린지 설명 카드 -->
          <div class="p-6 border rounded-lg shadow card">
            <h2 class="text-2xl font-bold mb-4"><%= mission.title %></h2>

            <div class="col-md-4">
              <div class="text-center">
                <div id="imagebox">
                  <img
                    alt="<%= mission.thumbnail %>"
                    src="https://life-bit.s3.ap-northeast-2.amazonaws.com/<%= mission.thumbnail %>"
                    width="200px"
                    height="200px"
                  />
                </div>
              </div>
            </div>

            <div class="mb-4">
              <div class="mb-1">
                <span> [미션 생성자] <%= mission.creatorId %> </span>
              </div>
              <div class="mb-1">
                <span class="font-medium"
                  >[카테고리] <%= mission.category %></span
                >
              </div>
              <div class="mb-1">
                <span
                  >[미션 기간] <%= mission.startDate %> ~ <%= mission.endDate
                  %></span
                >
              </div>
              <div class="mb-1">
                <span>[정원] <%= mission.numberPeople %>명</span>
              </div>
            </div>
            <p><%= mission.description %></p>

            <!-- 파일 선택 버튼 -->
            <input
              type="file"
              id="fileInput"
              style="display: none"
              accept="image/*"
            />

            <button id="updateBtn" class="submit-btn mt-4">
              미션 수정하기
            </button>

            <button id="deleteBtn" class="submit-btn mt-4">
              미션 삭제하기
            </button>

            <button id="fileSelectBtn" class="submit-btn mb-4">
              파일 선택
            </button>

            <!-- 미리보기 이미지 -->
            <img id="previewImage" class="mb-4 rounded-lg" />

            <!-- '인증하기' 버튼 -->
            <button id="submitBtn" class="submit-btn mb-4">인증하기</button>

            <!-- '목록으로 돌아가기' 버튼 -->
            <button class="back-btn mt-4">목록으로 돌아가기</button>
          </div>

          <!-- 챌린지 참여자 카드 -->
          <div class="p-6 border rounded-lg shadow card">
            <h2 class="text-lg font-bold mb-2">챌린지 참여자 목록</h2>
            <div class="mission-teammates">
              <div class="mission-teammate">
                <img src="/짱구.png" alt="짱구" />
                <span>짱구</span>
              </div>
              <div class="mission-teammate">
                <img src="/철수.png" alt="철수" />
                <span>철수</span>
              </div>
              <div class="mission-teammate">
                <img src="/맹구.png" alt="맹구" />
                <span>맹구</span>
              </div>
              <div class="mission-teammate">
                <img src="/수지.png" alt="수지" />
                <span>수지</span>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        // '인증하기' 버튼을 찾습니다.
        const submitBtn = document.querySelector('#submitBtn');

        // '파일 선택' 버튼을 찾습니다.
        const fileSelectBtn = document.querySelector('#fileSelectBtn');

        // 파일 입력 요소를 찾습니다.
        const fileInput = document.querySelector('#fileInput');

        // 미리보기 이미지를 찾습니다.
        const previewImage = document.querySelector('#previewImage');

        // '파일 선택' 버튼에 클릭 이벤트 리스너를 추가합니다.
        fileSelectBtn.addEventListener('click', function () {
          fileInput.click();
        });

        // 파일 입력 요소에 변경 이벤트 리스너를 추가합니다.
        fileInput.addEventListener('change', function () {
          const file = fileInput.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
              previewImage.src = e.target.result;
              previewImage.style.display = 'block'; // 미리보기 이미지를 표시합니다.
            };
            reader.readAsDataURL(file);
          } else {
            previewImage.style.display = 'none';
          }
        });

        // '인증하기' 버튼에 클릭 이벤트 리스너를 추가합니다.
        submitBtn.addEventListener('click', function (event) {
          event.preventDefault(); // 기본 폼 제출을 방지합니다.

          // 파일 선택 여부 확인
          const file = fileInput.files[0];
          if (!file) {
            alert('파일을 선택해주세요.');
            return;
          }

          // mission ID 및 category 값을 가져옵니다.
          const missionId = '<%= mission.missionId %>';
          const category = '<%= mission.category %>';

          // 필요한 데이터를 수집합니다.
          const formData = new FormData();
          formData.append('missionId', missionId);
          formData.append('category', category);
          formData.append('file', file);

          // POST 요청을 '/vision/certificate-category' 엔드포인트로 보냅니다.
          fetch('/vision/certificate-category', {
            method: 'POST',
            headers: {
              Authorization: `Bearer ${document.cookie.replace(/(?:(?:^|.*;\s*)authorization\s*\=\s*([^;]*).*$)|^.*$/, '$1')}`,
            },
            body: formData,
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.isCategoryMatched) {
                alert('인증에 성공했습니다!');
              } else {
                alert('인증에 실패했습니다. 카테고리가 일치하지 않습니다.');
              }
            })
            .catch((error) => {
              console.error('인증 중 오류가 발생했습니다:', error);
              alert('인증 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.');
            });
        });

        // '목록으로 돌아가기' 버튼을 찾습니다.
        const backBtn = document.querySelector('.back-btn');

        // '목록으로 돌아가기' 버튼에 클릭 이벤트 리스너를 추가합니다.
        backBtn.addEventListener('click', function () {
          // 'main.ejs' 페이지로 이동합니다.
          window.location.href = '/mission/main';
        });

        // 로그인 상태 확인 함수
        function isUserLoggedIn() {
          try {
            const token = document.cookie.replace(
              /(?:(?:^|.*;\s*)authorization\s*\=\s*([^;]*).*$)|^.*$/,
              '$1',
            );
            return !!token;
          } catch (error) {
            console.error(
              '쿠키에서 authorization 값을 가져오는 중 오류가 발생했습니다:',
              error,
            );
            return false;
          }
        }

        // '미션 수정하기' 버튼을 찾습니다.
        const updateBtn = document.querySelector('#updateBtn');

        // '미션 수정하기' 버튼에 클릭 이벤트 리스너를 추가합니다.
        updateBtn.addEventListener('click', function () {
          /*
          if (!isUserLoggedIn()) {
            alert('로그인한 사용자만 이용할 수 있는 기능입니다.');
            window.location.href = '/user/sign-in';
            return;
          }
          */
          window.location.href = `/mission/update/<%= mission.missionId %>`;
        });

        // 토큰 체크
        const tokenBtn = document.querySelector('#tokenBtn');

        tokenBtn.addEventListener('click', function (event) {
          if (isUserLoggedIn()) {
            alert('사용자 로그인됨!');
          } else {
            alert('사용자 로그인 안 됨!');
          }
        });
      });

      // '삭제하기' 버튼을 찾습니다.
      const deleteBtn = document.querySelector('#deleteBtn');

      // '삭제하기' 버튼에 클릭 이벤트 리스너를 추가합니다.
      deleteBtn.addEventListener('click', function (event) {
        event.preventDefault(); // 기본 폼 제출을 방지합니다.

        // 사용자에게 확인 메시지를 보여줍니다.
        const confirmation = confirm(
          '미션을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.',
        );

        // 사용자가 확인을 누르면 삭제 요청을 보냅니다.
        if (confirmation) {
          const missionId = '<%= mission.missionId %>';

          // DELETE 요청을 '/mission/{missionId}' 엔드포인트로 보냅니다.
          fetch(`/mission/${missionId}`, {
            method: 'DELETE',
            headers: {
              Authorization: `Bearer ${document.cookie.replace(/(?:(?:^|.*;\s*)authorization\s*\=\s*([^;]*).*$)|^.*$/, '$1')}`,
            },
          })
            .then((response) => {
              // 응답이 성공적인지 확인합니다.
              if (response.ok) {
                alert('미션이 성공적으로 삭제되었습니다.');
                // 미션 목록 페이지로 리디렉션합니다.
                window.location.href = '/mission/main';
              } else {
                // 오류가 있는 경우 에러 메시지 처리
                response.json().then((errorData) => {
                  const errorMessage =
                    errorData.message || '미션 삭제에 실패했습니다.';
                  alert(`미션 삭제 중 오류가 발생했습니다: ${errorMessage}`);
                });
              }
            })
            .catch((error) => {
              console.error('미션 삭제 중 오류가 발생했습니다:', error);
              alert(
                '미션 삭제 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',
              );
            });
        }
      });
    </script>
  </body>
</html>
