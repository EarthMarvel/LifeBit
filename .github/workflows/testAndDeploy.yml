name: testAndDeploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: lifebit             
  ECS_SERVICE: pleaseplease                 
  ECS_CLUSTER: liftbit            
  ECS_TASK_DEFINITION: ./task_definition.json                  
  CONTAINER_NAME: lifebit                                                      

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  
jobs:
      test:
        runs-on: ubuntu-22.04 #서버와 동일한 버전
        steps: 
            - name: Checkout repository # 리포지토리에서 코드 가져오기
              uses: actions/checkout@v4 # 최신 버전으로 업데이트 #오픈소스 패키지 사용하듯이 actions 도 마켓 플레이스가 있다. 액션을 지정한다.
            - name: Build and test with Docker Compose
              run: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
      deploy:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                 role-to-assume: arn:aws:iam::120342520927:role/github_EarthMarvel_LifeBit_OIDC
                 role-session-name: sampleSessionName
                 aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                # Build a docker container and
                # push it to ECR so that it can
                # be deployed to ECS.
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
              with:
                task-definition: ${{ env.ECS_TASK_DEFINITION }}
                container-name: ${{ env.CONTAINER_NAME }}
                image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: ${{ env.ECS_SERVICE }}
                cluster: ${{ env.ECS_CLUSTER }}
                wait-for-service-stability: true
